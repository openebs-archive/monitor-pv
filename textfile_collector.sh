#!/bin/bash

FILEPATH=${TEXTFILE_PATH:=/shared_vol/scrape.txt}
INTERVAL=${COLLECT_INTERVAL:=10}
PROVISIONERS=${PROVISIONER_WHITELIST:=openebs.io/local}

## collect_pv_capacity_metrics collects the PV capacity metrics
function collect_pv_capacity_metrics(){
  for i in ${pv_list[@]}
  do
    pvc_name=$(kubectl get pv ${i} -o custom-columns=:spec.claimRef.name --no-headers | tr '[:upper:]' '[:lower:]')
    size_in_spec=$(kubectl get pv ${i} -o custom-columns=:spec.capacity.storage --no-headers | tr '[:upper:]' '[:lower:]')
    size_in_bytes=$(numfmt --from=auto --to=none ${size_in_spec};)
    echo "pv_capacity_bytes{persistentvolume=\"${i}\",persistentvolumeclaim=\"${pvc_name}\"} ${size_in_bytes}"
  done
}

## collect_pv_utilization_metrics collects the PV utilization metrics
function collect_pv_utilization_metrics(){
  declare -a pv_mount_list=()

  for i in ${pv_list[@]}
  do
    pv_mount_list+=($(findmnt --df | grep ${i} | grep '/var/lib/kubelet/pods' | head -1 | awk '{print $NF}'))
  done

  echo "mount list: ${pv_mount_list[@]}" >&2
  for i in ${pv_mount_list[@]}
  do
    ## Get mount point utilization in bytes
    mount_data=$(du -sb ${i})
    utilization=$(echo ${mount_data}| cut -d " " -f 1)
    pv_name=$(basename $(echo ${mount_data} | cut -d " " -f 2))
    pvc_name=$(kubectl get pv ${pv_name} -o custom-columns=:spec.claimRef.name --no-headers | tr '[:upper:]' '[:lower:]')
    echo "pv_utilization_bytes{persistentvolume=\"${pv_name}\",persistentvolumeclaim=\"${pvc_name}\"} ${utilization}"
  done
}

write_to_file() {
  cap_metrics="${1:-""}"
  util_metrics="${2:-""}"

  cat <<END > "${FILEPATH}"
# Prometheus metrics generated by monitor-pv at $(date)

# Capacity metrics
${cap_metrics}

# Utilization metrics
${util_metrics}
END
}

while true
do
  provisioner_list=$(echo ${PROVISIONERS} | tr ',' ' ')
  declare -a pv_list=()

  ## Select only those PVs that are bound. Several stale PVs can exist.
  for i in $(kubectl get pv -o jsonpath='{.items[?(@.status.phase=="Bound")].metadata.name}')
  do
    ## Select only those PVs that are provisioned by the whitelisted provisioners
    ## Nested conditions in jsonpath filters are not supported yet. Ref: https://github.com/kubernetes/kubernetes/issues/20352
    if [[ ${provisioner_list} =~ $(kubectl get pv ${i} -o jsonpath='{.metadata.annotations.pv\.kubernetes\.io/provisioned-by}') ]]
    then
      pv_list+=(${i})
    fi
  done

  echo "No. of PVs by specified provisioners: ${#pv_list[@]}"

  if [[ ${#pv_list[@]} -ne 0 ]]; then
    echo "PV List: ${pv_list[@]}"
    cap_metrics="$(collect_pv_capacity_metrics)"
    util_metrics="$(collect_pv_utilization_metrics)"
    write_to_file "$cap_metrics" "$util_metrics"
  else
    write_to_file "" ""
  fi

  sleep ${INTERVAL}
done
